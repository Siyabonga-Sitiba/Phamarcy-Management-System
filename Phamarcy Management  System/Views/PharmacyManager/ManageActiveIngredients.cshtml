@{
    ViewData["Title"] = "Manage ActiveIngredients";
    Layout = "_Layout";
}

<div class="container" data-aos="fade-right">
    <h2 class="dashboard-title">Manage Active Ingredients</h2>

    <!-- Search & Filter -->
    <div class="toolbar">
        <button class="btn btn-primary" onclick="openAddModal()">➕ Add New Ingredient</button>

        <div class="search-filter">
            <input type="text" id="searchInput" placeholder="Search Ingredients..." class="input" oninput="renderIngredients()">
            <select id="statusFilter" class="input" onchange="renderIngredients()">
                <option value="All">Filter by Status</option>
                <option value="Active">Active</option>
                <option value="Removed">Removed</option>
            </select>
        </div>
    </div>

    <!-- Ingredients Table -->
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="ingredientList"></tbody>
    </table>

    <!-- Pagination -->
    <div id="pagination" class="pagination" ></div>
    
</div>

<!-- Add Modal -->
<div class="modal hidden" id="addModal" data-aos="fade-left">
    <div class="modal-content" >
        <div class="modal-header">
            <h3>Add New Ingredient</h3>
            <button class="close-btn" onclick="closeAddModal()">×</button>
        </div>
        <form onsubmit="submitNewIngredient(event)">

            <div class="form-grid">
                <input type="text" id="addName" class="input" placeholder="Ingredient Name" required>
            </div><br />
            
            <div class="button-group">
                <button type="submit" class="btn btn-success">Add</button>
            </div>
        </form>
    </div>
</div>

<!-- Edit Modal -->
<div class="modal hidden" id="editModal" data-aos="fade-left">
    <div class="modal-content">
        <div class="modal-header">
            <h3>Edit Ingredient</h3>
            <button class="close-btn" onclick="closeEditModal()">×</button>
        </div>
        <form onsubmit="saveIngredientEdit(event)">
            <div class="form-grid">
            <input type="text" id="editName" class="input" placeholder="Ingredient Name" required>
            </div><br />
            
            <div class="button-group">
                <button type="submit" class="btn btn-success">Update</button>
            </div>
        </form>
    </div>
</div>
@* /*/**css*** *@
<style>
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
    }

        .modal.hidden {
            display: none;
        }

    .modal-content {
        background: darkgrey;
        padding: 30px;
        border-radius: 8px;
        width: 600px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        font-family: Arial, sans-serif;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

        .modal-header h3 {
            margin: 0;
        }

    .close-btn {
        background: none;
        border: none;
        font-size: 20px;
        cursor: pointer;
    }

        .close-btn:hover {
            color: darkred;
        }

    .form-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 15px;
        margin-bottom: 15px;
    }

        .form-grid.single {
            grid-template-columns: 1fr;
        }

    .input {
        padding: 10px;
        border-radius: 4px;
        border: 1px solid #ccc;
        font-size: 14px;
        width: 100%;
    }

        .input:invalid {
            border-color: #dc3545;
        }

    .button-group {
        margin-top: 20px;
        display: flex;
        gap: 10px;
        justify-content: flex-end;
    }

    .btn {
        padding: 10px 15px;
        border: none;
        border-radius: 4px;
        font-size: 14px;
        cursor: pointer;
    }

    .btn-success {
        background-color: #28a745;
        color: white;
    }

    .btn-danger {
        background-color: #dc3545;
        color: white;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

        .btn-primary:hover,
        .btn-secondary:hover {
            opacity: 0.9;
        }

    .container {
        padding: 20px;
        font-family: Arial, sans-serif;
    }

    .search-filter {
        display: flex;
        gap: 10px;
        margin-bottom: 15px;
    }

    table {
        width: 50%;
        border-collapse: collapse;
        margin: 10px auto;
        background-color:white;
    }

    th, td {
        padding: 10px;
        border-bottom: 1px solid #ccc;
        justify-content: center;
    }

    .pagination {
        margin-top: 15px;
        display: flex;
        align-items: center;
        gap: 5px;
        flex-wrap: wrap;
    }

        .pagination span {
            font-weight: bold;
            color:darkred;
        }
</style>


<!-- JavaScript Functions -->
@section Scripts {
    <script>
             let ingredients = [
            { id: 1, name: "Paracetamol", active: true },
            { id: 2, name: "Ibuprofen", active: true },
            { id: 3, name: "Aspirin", active: true },
            { id: 5, name: "Amoxicillin",  active: true },
            { id: 6, name: "Metformin",  removed: true },
            { id: 7, name: "Atorvastatin", removed: true }
        ];

        let currentPage = 1;
        const perPage = 4;
        let selectedIngredient = null;

        function renderIngredients() {
            const search = document.getElementById("searchInput").value.toLowerCase();
            const filter = document.getElementById("statusFilter").value;
            const listEl = document.getElementById("ingredientList");
            const paginationEl = document.getElementById("pagination");

            const filtered = ingredients.filter(i =>
                i.name.toLowerCase().includes(search) &&
                (filter === "All" || (filter === "Active" && i.active) || (filter === "Removed" && !i.active))
            );

            const start = (currentPage - 1) * perPage;
            const paged = filtered.slice(start, start + perPage);

            listEl.innerHTML = paged.map(i => `
                <tr>
                    <td>${i.name}</td>
                    <td>
                        <button class="btn btn-success" onclick="openEditModal(${i.id})">Edit</button>
                        <button class="btn btn-danger" onclick="confirmDelete(${i.id})">Remove</button>
                    </td>
                </tr>
            `).join("");

                   paginationEl.innerHTML = "";

        // Page indicator
        const totalPages = Math.ceil(filtered.length / perPage);
        paginationEl.innerHTML += `<span style:color"darkred">Page ${currentPage} of ${totalPages || 1}</span>`;

        // Page buttons
        for (let i = 1; i <= totalPages; i++) {
            paginationEl.innerHTML += `<button onclick="goToPage(${i})" class="btn ${i === currentPage ? 'btn-primary' : 'btn-secondary'}">${i}</button>`;
        }

        }

        function goToPage(page) {
            currentPage = page;
            renderIngredients();
        }

        function openEditModal(id) {
            selectedIngredient = ingredients.find(i => i.id === id);
            document.getElementById("editName").value = selectedIngredient.name;
            document.getElementById("editModal").classList.remove("hidden");
        }

        function closeEditModal() {
            document.getElementById("editModal").classList.add("hidden");
        }

        function saveIngredientEdit(event) {
            event.preventDefault();
            selectedIngredient.name = document.getElementById("editName").value;
            closeEditModal();
            alert("✅ Ingredient successfully updated!");
            renderIngredients();
        }

        function confirmDelete(id) {
            if (confirm("Are you sure you want to delete this ingredient?")) {
                ingredients = ingredients.filter(i => i.id !== id);
                alert("✅ Ingredient successfully deleted!");
                renderIngredients();
            }
        }

        function openAddModal() {
            document.getElementById("addName").value = "";
            document.getElementById("addModal").classList.remove("hidden");
        }

        function closeAddModal() {
            document.getElementById("addModal").classList.add("hidden");
        }

                function submitNewIngredient(event) {
            event.preventDefault();
            const name = document.getElementById("addName").value.trim();

            if (!name || !strength) {
                alert("⚠️ All fields are required.");
                return;
            }

            const newIngredient = {
                id: ingredients.length ? Math.max(...ingredients.map(i => i.id)) + 1 : 1,
                name,
                strength: Number(strength),
                active: true
            };
            ingredients.push(newIngredient);

            // Go to last page so the newly added item is visible
            const filter = document.getElementById("statusFilter").value;
            const search = document.getElementById("searchInput").value.toLowerCase();
            const filtered = ingredients.filter(i =>
                i.name.toLowerCase().includes(search) &&
                (filter === "All" || (filter === "Active" && i.active) || (filter === "Removed" && !i.active))
            );
            const totalPages = Math.ceil(filtered.length / perPage);
            currentPage = totalPages;

            alert("✅ Ingredient successfully added!");
            closeAddModal();
            renderIngredients();
        }


        renderIngredients();

              AOS.init({
            offset: 300,
            duration: 1400
        });
    </script>
}


